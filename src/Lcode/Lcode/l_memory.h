/*****************************************************************************\
 *
 *		      Illinois Open Source License
 *                     University of Illinois/NCSA
 *                         Open Source License
 *
 * Copyright (c) 2004, The University of Illinois at Urbana-Champaign.
 * All rights reserved.
 *
 * Developed by:             
 *
 *		IMPACT Research Group
 *
 *		University of Illinois at Urbana-Champaign
 *
 *              http://www.crhc.uiuc.edu/IMPACT
 *              http://www.gelato.org
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal with the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimers.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimers in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the names of the IMPACT Research Group, the University of
 * Illinois, nor the names of its contributors may be used to endorse
 * or promote products derived from this Software without specific
 * prior written permission.  THE SOFTWARE IS PROVIDED "AS IS",
 * WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 *
\*****************************************************************************/
/*===========================================================================
 *      File :          l_memory.h
 *      Description :   memory disambiguation
 *      Author :        Pohua Chang, Scott Mahlke, Wen-mei Hwu
 *      Date :          July, 1990
 *
 *==========================================================================*/
#ifndef L_MEMORY_H
#define L_MEMORY_H

/* 10/29/02 REK Adding config.h */
#include <config.h>

/*
 *      Memory access types - This is used for memory disambiguation and
 *      the different data types flag.  Note floats and doubles are not
 *      differentiated to be conservative.
 */
#define L_MEMORY_ACCESS_PREDICATE       1000
#define L_MEMORY_ACCESS_CHAR            1001
#define L_MEMORY_ACCESS_CHAR2           1002
#define L_MEMORY_ACCESS_INT             1003
#define L_MEMORY_ACCESS_FLOAT           1004
#define L_MEMORY_ACCESS_DOUBLE          1005
#define L_MEMORY_ACCESS_LLONG           1006

/*
 *      Marking labels in attr fields (generated by Lopti)
 */
#define L_LABEL_PREFIX                  "lab"   /* label unknown offset */
#define L_LABEL_PREFIX_LEN              3
#define L_LABEL_OFFSET_PREFIX           "labO"  /* label with int offset */
#define L_LABEL_OFFSET_PREFIX_LEN       4

/*
 *      Memory dependence types (for daveg)
 */
#define CERTAIN_INDEPENDENCE            1
#define LIKELY_INDEPENDENCE             2
#define UNCERTAIN                       3
#define LIKELY_DEPENDENCE               4
#define CERTAIN_DEPENDENCE              5

#define STACK_ATTR_NAME "stack"

/*
 *      For use by indep_mem_op, maybe move it there
 */
#define   MEM_DEP   1
#define   MEM_AMB   2
#define   MEM_IND   3


#ifdef __cplusplus
extern "C"
{
#endif

/*
 *      External variables
 */

  extern int L_ambig_mem_always_indep;
  extern int L_load_store_always_indep;
  extern int L_mem_never_indep;
  extern int L_ignore_sync_arcs_for_opti;

  extern int L_ignore_acc_specs;

/*
 *      External functions
 */

  extern int L_is_nonconflicting_stack_operand (L_Operand * operand);
  extern int L_find_first_seq_op (L_Oper * op1, L_Oper * op2,
                                  L_Oper ** first_op, L_Oper ** second_op);
  extern int L_constant_load (L_Oper * op);
  extern int L_has_label_in_attr (L_Oper * op);
  extern int L_spill_offset (L_Oper * op, int *offset);
  extern int L_spill_code (L_Oper * op);
  extern int L_memory_access_size (L_Oper * op);
  extern int L_no_overlap (int offset1, int size1, int offset2, int size2);
  extern int L_in_same_block (L_Oper * op1, L_Oper * op2);
  extern int L_same_data_types (L_Oper * op1, L_Oper * op2);
  extern int L_check_attr_labels (L_Oper * op1, L_Oper * op2, int stack1,
                                  int stack2);
  extern int L_check_different_parameters (L_Oper * op1, L_Oper * op2);
  extern int L_check_different_iteration (L_Cb * cb, L_Oper * op1,
                                          L_Oper * op2);
  extern int L_opcode_ctype2 (L_Oper *);
  extern void L_test_memory_disamb (L_Func *);
  extern void L_find_memory_labels (L_Func *);
  extern void L_find_incoming_parameters (L_Func *);

  extern void L_check_memory_op_dependence (L_Cb *, L_Oper *, L_Cb *,
                                            L_Oper *, int, int *, int *);
  extern int L_independent_memory_ops2 (L_Cb *, L_Oper *, L_Cb *, L_Oper *,
                                        int);

/* this function is in l_indep_mem.c */
  extern int L_independent_memory_ops (L_Cb *, L_Oper *, L_Oper *, int);
  extern int L_memory_dependence_relation (L_Oper *, L_Oper *);
  extern int L_independent_memory_and_jsr (L_Cb *, L_Oper *, L_Oper *);
  extern int L_is_ida_memory_ops (L_Cb * cb1, L_Oper * op1, L_Cb * cb2,
                                  L_Oper * op2, int dep_flags);

  extern int L_stack_reference (L_Oper * op);

  extern int L_depinfo_indep_mem_ops (L_Oper *op1, L_Oper *op2, int dep_flags);
  extern Set L_mem_find_all_conflicting_expression_opers (L_Oper * oper);

#ifdef __cplusplus
}
#endif

#endif
