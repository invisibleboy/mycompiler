/*****************************************************************************\
 *
 *		      Illinois Open Source License
 *                     University of Illinois/NCSA
 *                         Open Source License
 *
 * Copyright (c) 2004, The University of Illinois at Urbana-Champaign.
 * All rights reserved.
 *
 * Developed by:             
 *
 *		IMPACT Research Group
 *
 *		University of Illinois at Urbana-Champaign
 *
 *              http://www.crhc.uiuc.edu/IMPACT
 *              http://www.gelato.org
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal with the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimers.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimers in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the names of the IMPACT Research Group, the University of
 * Illinois, nor the names of its contributors may be used to endorse
 * or promote products derived from this Software without specific
 * prior written permission.  THE SOFTWARE IS PROVIDED "AS IS",
 * WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 *
\*****************************************************************************/
/*
 *   This file was automatically generated by cextract version 1.2.
 *   Manual editing not recommended.
 *
 *   Created: Thu Sep 15 23:53:40 1994
 */
#include <config.h>

#ifndef __CEXTRACT__
#ifdef __STDC__

extern CallGraph *L_callgraph_build ( FILE * );
extern void L_callgraph_delete ( CallGraph * );
extern int L_callgraph_get_func_id ( CallGraph *, char * );
extern void L_callgraph_print ( FILE *, CallGraph * );
extern Set L_callgraph_query ( CallGraph *, int, int );
extern void L_cg_add_arc ( CG_Node *, L_Oper *, L_Operand * );
extern void L_cg_add_node ( CG_Node * );
extern void L_cg_add_non_dup_arc ( CG_Node *, L_Oper *, L_Operand * );
extern void L_cg_add_unknown_arcs ( CG_Node * );
extern void L_cg_delete_all_dst_arcs ( CG_Arc * );
extern void L_cg_delete_all_src_arcs ( CG_Arc * );
extern void L_cg_delete_arc ( CG_Arc * );
extern void L_cg_delete_node ( CG_Node * );
extern CG_Node *L_cg_find_node ( char * );
extern void L_cg_free_functions ( CallGraph * );
extern CG_Node *L_cg_get_node_from_id ( int );
extern void L_cg_load_func ( CG_Node * );
extern CallGraph *L_cg_new_callgraph ( void );
extern CG_Node *L_cg_new_node ( char * );
extern void L_cg_resolve_unknown_jsr ( CG_Node * );
extern void L_cg_resolve_unknown_nodes ( void );
extern void L_database_add_entry ( int, char * );
extern void L_database_init ( void );
extern void L_db_add_callsite ( int, int, char *, int );
extern void L_db_add_global_memory_cell ( int, int, int, L_Operand *, L_Operand * );
extern void L_db_add_global_memory_value ( int, int, int, L_Operand *, L_Operand *, int, L_Operand *, L_Operand *, L_Operand * );
extern void L_db_add_param_reg ( int, int, int, L_Operand * );
extern void L_db_add_param_value ( int, int, int, L_Operand *, int, L_Operand *, L_Operand *, L_Operand * );
extern void L_db_add_return_value ( int, L_Operand *, int, L_Operand *, L_Operand *, L_Operand * );
extern Database_Callsite *L_db_find_callsite ( Database_Entry *, int, int, Database_Callsite * );
extern Database_Entry *L_db_find_entry ( int );
extern Memory_Cell *L_db_find_global_memory_cell ( Database_Callsite *, L_Operand *, L_Operand * );
extern Reg *L_db_find_param_reg ( Database_Callsite *, L_Operand * );
extern int L_db_global_memory_cell_defined ( Database_Callsite *, L_Operand *, L_Operand * );
extern Database_Callsite *L_db_new_callsite ( int, char *, int );
extern Database_Entry *L_db_new_entry ( int, char * );
extern int L_db_param_reg_defined ( Database_Callsite *, L_Operand * );
extern Memory_Cell *L_db_query_global_memory ( CG_Node *, int, int, L_Oper * );
extern Reg *L_db_query_param_reg ( CG_Node *, int, int, L_Operand * );
extern Reg *L_db_query_return_reg ( CG_Node *, CG_Node *, L_Operand * );
extern void L_db_update_global_memory ( Database_Entry *, CG_Node *, L_Oper * );
extern void L_db_update_param_reg ( Database_Entry *, CG_Node *, L_Operand * );
extern void L_db_update_return_reg ( CG_Node *, L_Operand * );
extern L_Oper *L_find_rts ( L_Func * );
extern void L_gen_code ( Parm_Macro_List * );
extern void L_interproc_init ( Parm_Macro_List * );
extern void L_read_parm_safe ( Parm_Parse_Info * );
extern Memory_Cell *L_mem_add_cell ( Memory *, L_Operand *, L_Operand *, int );
extern Memory_Cell *L_mem_add_hash ( L_Operand * );
extern int L_mem_compute_hash ( Memory *, L_Operand *, L_Operand * );
extern void L_mem_define_cell ( CG_Node *, L_Operand *, L_Operand *, int, L_Operand *, L_Operand *, L_Operand *, int );
extern void L_mem_delete ( Memory * );
extern void L_mem_delete_cell ( Memory_Cell * );
extern void L_mem_delete_hash ( void );
extern void L_mem_delete_value_gt_level ( Memory *, int );
extern Memory_Cell *L_mem_find_cell ( Memory *, L_Operand *, L_Operand * );
extern Memory_Cell *L_mem_find_hash ( L_Operand *, L_Operand * );
extern Memory_Cell *L_mem_get_cell ( CG_Node *, L_Oper * );
extern int L_mem_global_load ( L_Oper * );
extern int L_mem_global_ref ( L_Operand *, L_Operand * );
extern int L_mem_global_store ( L_Oper * );
extern void L_mem_load_data ( L_Data * );
extern int L_mem_local_load ( L_Oper * );
extern int L_mem_local_ref ( L_Operand *, L_Operand * );
extern int L_mem_local_store ( L_Oper * );
extern Memory_Cell *L_mem_new_cell ( L_Operand *, L_Operand *, int );
extern Memory *L_mem_new_memory ( int );
extern int L_mem_ptr_load ( L_Oper * );
extern int L_mem_ptr_ref ( L_Operand *, L_Operand * );
extern int L_mem_ptr_store ( L_Oper * );
extern void L_mem_reset ( CG_Node * );
extern int L_mem_same_address ( L_Operand *, L_Operand *, L_Operand *, L_Operand * );
extern int L_mem_same_global_address ( L_Operand *, L_Operand *, L_Operand *, L_Operand * );
extern void L_rf_define_register ( RegFile *, L_Operand *, int, L_Operand *, L_Operand *, L_Operand *, int );
extern void L_rf_delete_reg ( Reg * );
extern void L_rf_delete_register_gt_level ( RegFile *, int );
extern void L_rf_delete_reg_file ( RegFile * );
extern Reg *L_rf_delete_reg_gt_level ( Reg *, int );
extern RegBank *L_rf_enlargen_bank ( RegBank *, int );
extern Reg *L_rf_get_register ( CG_Node *, RegFile *, L_Operand * );
extern Reg *L_rf_get_return_reg ( CG_Node *, RegFile *, L_Oper *, L_Operand *, L_Operand * );
extern Reg *L_rf_new_reg ( L_Operand * );
extern RegFile *L_rf_new_reg_file ( void );
extern void L_rf_reset_reg_file ( RegFile * );
extern int L_can_swap_int_operands ( int );
extern L_Operand *L_get_return_param ( L_Oper * );
extern Resolved *L_resolve_unknown ( CG_Node *, L_Cb *, L_Oper *, int, L_Operand **, L_Oper * );
extern Resolved *L_rs_add_cell ( Resolved *, Memory_Cell *, int );
extern Resolved *L_rs_add_reg ( Resolved *, Reg *, int );
extern void L_rs_delete_resolved ( Resolved * );
extern void L_rs_evaluate_double_arith ( CG_Node *, RegFile *, L_Oper *, int );
extern void L_rs_evaluate_float_arith ( CG_Node *, RegFile *, L_Oper *, int );
extern void L_rs_evaluate_int_arith ( CG_Node *, RegFile *, L_Oper *, int );
extern void L_rs_evaluate_jsr ( CG_Node *, RegFile *, L_Oper *, int );
extern void L_rs_evaluate_load ( CG_Node *, RegFile *, L_Oper *, int );
extern void L_rs_evaluate_mov ( CG_Node *, RegFile *, L_Oper *, int );
extern void L_rs_evaluate_store ( CG_Node *, RegFile *, L_Oper *, int );
extern Resolved *L_rs_new_resolved ( void );
extern double L_rs_perform_dbl_arith ( int, L_Operand *, L_Operand *, L_Operand * );
extern double L_rs_perform_flt_arith ( int, L_Operand *, L_Operand *, L_Operand * );
extern int L_rs_perform_int_arith ( int, L_Operand *, L_Operand *, L_Operand * );
extern void L_rs_perform_store ( CG_Node *, RegFile *, L_Operand *, L_Operand *, L_Operand *, int );
extern Resolved *L_rs_resolve_unknown ( Resolved *, CG_Node *, RegFile *, UD_Node *, UD_Node *, int, int, L_Operand **, L_Oper * );
extern Value *L_rs_solve_2op_int_arith ( RegFile *, L_Operand *, int, Value *, Value *, int, int );
extern void L_find_side_effect_free ( CallGraph *, FILE * );
extern int L_is_safe_subroutine_call ( CG_Node *, L_Oper *, int );
extern int L_is_stack_store ( L_Oper * );
extern void L_add_arc ( UD_Node *, UD_Node * );
extern int L_add_non_duplicate_arc ( UD_Node *, UD_Node * );
extern void L_delete_arc ( UD_Arc * );
extern void L_free_all_dst_arcs ( UD_Arc * );
extern void L_free_all_src_arcs ( UD_Arc * );
extern void L_ud_add_retrace ( UD_Graph *, UD_Node *, L_Cb *, L_Oper *, Set, Def_List * );
extern Set L_ud_add_src ( Set, L_Operand * );
extern Set L_ud_add_src_reg ( Set, int );
extern void L_ud_add_start_node ( UD_Graph *, UD_Node * );
extern void L_ud_build_graph_recurse ( UD_Graph *, UD_Node *, Set, Def_List * );
extern int L_ud_convert_operand ( L_Operand * );
extern Def_List *L_ud_copy_def_list ( Def_List * );
extern void L_ud_delete_node ( UD_Graph *, UD_Node * );
extern int L_ud_find_matching_address ( Def_List *, L_Oper * );
extern int L_ud_find_matching_hash ( Def_List *, L_Oper * );
extern UD_Node *L_ud_find_retrace ( UD_Graph *, L_Cb *, L_Oper *, Set, Def_List * );
extern L_Oper *L_ud_find_start_pt ( L_Cb *, L_Cb * );
extern void L_ud_free_all_def_oper ( Def_Oper * );
extern void L_ud_free_all_retrace ( UD_Graph * );
extern void L_ud_free_def_list ( Def_List * );
extern int L_ud_ignore_oper ( L_Oper * );
extern void L_ud_insert_def_oper_first ( UD_Node *, Def_Oper * );
extern Def_List *L_ud_new_def_list ( void );
extern Def_Oper *L_ud_new_def_oper ( L_Oper * );
extern UD_Graph *L_ud_new_graph ( L_Func *, L_Cb *, L_Oper *, L_Oper * );
extern UD_Node *L_ud_new_node ( UD_Graph *, L_Cb *, L_Oper * );
extern Retrace *L_ud_new_retrace ( UD_Node *, L_Cb *, L_Oper *, Set, Def_List * );
extern void L_ud_print_def_oper ( Def_Oper * );
extern void L_ud_print_graph_recurse ( UD_Node * );
extern void L_ud_print_node ( UD_Node * );
extern void L_ud_reduce_graph ( UD_Graph * );
extern void L_ud_reduce_graph_recurse ( UD_Graph *, UD_Node * );
extern Set L_ud_remove_dest ( Set, int );
extern void L_ud_remove_matching_address ( Def_List *, L_Oper * );
extern void L_ud_update_def_list ( Def_List *, L_Oper * );
extern UD_Graph *L_usedef_build_graph ( CG_Node *, L_Cb *, L_Oper *, int, L_Operand **, L_Oper * );
extern void L_usedef_delete_graph ( UD_Graph * );
extern void L_usedef_print_graph ( UD_Graph * );
extern Value *L_v_add_value ( Value *, int, L_Operand *, L_Operand *, L_Operand *, int );
extern Value *L_v_copy_value ( Value * );
extern void L_v_delete_all_value ( Value * );
extern Value *L_v_delete_value_gt_level ( Value *, int );
extern Value *L_v_find_matching_value ( Value *, int, L_Operand *, L_Operand *, L_Operand *, int );
extern Value *L_v_get_value_same_level ( Value *, Value * );
extern Value *L_v_new_value ( int, L_Operand *, L_Operand *, L_Operand *, int );

#else /* __STDC__ */

extern CallGraph *L_callgraph_build (/* FILE * */);
extern void L_callgraph_delete (/* CallGraph * */);
extern int L_callgraph_get_func_id (/* CallGraph *, char * */);
extern void L_callgraph_print (/* FILE *, CallGraph * */);
extern Set L_callgraph_query (/* CallGraph *, int, int */);
extern void L_cg_add_arc (/* CG_Node *, L_Oper *, L_Operand * */);
extern void L_cg_add_node (/* CG_Node * */);
extern void L_cg_add_non_dup_arc (/* CG_Node *, L_Oper *, L_Operand * */);
extern void L_cg_add_unknown_arcs (/* CG_Node * */);
extern void L_cg_delete_all_dst_arcs (/* CG_Arc * */);
extern void L_cg_delete_all_src_arcs (/* CG_Arc * */);
extern void L_cg_delete_arc (/* CG_Arc * */);
extern void L_cg_delete_node (/* CG_Node * */);
extern CG_Node *L_cg_find_node (/* char * */);
extern void L_cg_free_functions (/* CallGraph * */);
extern CG_Node *L_cg_get_node_from_id (/* int */);
extern void L_cg_load_func (/* CG_Node * */);
extern CallGraph *L_cg_new_callgraph (/* void */);
extern CG_Node *L_cg_new_node (/* char * */);
extern void L_cg_resolve_unknown_jsr (/* CG_Node * */);
extern void L_cg_resolve_unknown_nodes (/* void */);
extern void L_database_add_entry (/* int, char * */);
extern void L_database_init (/* void */);
extern void L_db_add_callsite (/* int, int, char *, int */);
extern void L_db_add_global_memory_cell (/* int, int, int, L_Operand *, L_Operand * */);
extern void L_db_add_global_memory_value (/* int, int, int, L_Operand *, L_Operand *, int, L_Operand *, L_Operand *, L_Operand * */);
extern void L_db_add_param_reg (/* int, int, int, L_Operand * */);
extern void L_db_add_param_value (/* int, int, int, L_Operand *, int, L_Operand *, L_Operand *, L_Operand * */);
extern void L_db_add_return_value (/* int, L_Operand *, int, L_Operand *, L_Operand *, L_Operand * */);
extern Database_Callsite *L_db_find_callsite (/* Database_Entry *, int, int, Database_Callsite * */);
extern Database_Entry *L_db_find_entry (/* int */);
extern Memory_Cell *L_db_find_global_memory_cell (/* Database_Callsite *, L_Operand *, L_Operand * */);
extern Reg *L_db_find_param_reg (/* Database_Callsite *, L_Operand * */);
extern int L_db_global_memory_cell_defined (/* Database_Callsite *, L_Operand *, L_Operand * */);
extern Database_Callsite *L_db_new_callsite (/* int, char *, int */);
extern Database_Entry *L_db_new_entry (/* int, char * */);
extern int L_db_param_reg_defined (/* Database_Callsite *, L_Operand * */);
extern Memory_Cell *L_db_query_global_memory (/* CG_Node *, int, int, L_Oper * */);
extern Reg *L_db_query_param_reg (/* CG_Node *, int, int, L_Operand * */);
extern Reg *L_db_query_return_reg (/* CG_Node *, CG_Node *, L_Operand * */);
extern void L_db_update_global_memory (/* Database_Entry *, CG_Node *, L_Oper * */);
extern void L_db_update_param_reg (/* Database_Entry *, CG_Node *, L_Operand * */);
extern void L_db_update_return_reg (/* CG_Node *, L_Operand * */);
extern L_Oper *L_find_rts (/* L_Func * */);
extern void L_gen_code (/* Parm_Macro_List * */);
extern void L_interproc_init (/* Parm_Macro_List * */);
extern void L_read_parm_safe (/* Parm_Parse_Info * */);
extern Memory_Cell *L_mem_add_cell (/* Memory *, L_Operand *, L_Operand *, int */);
extern Memory_Cell *L_mem_add_hash (/* L_Operand * */);
extern int L_mem_compute_hash (/* Memory *, L_Operand *, L_Operand * */);
extern void L_mem_define_cell (/* CG_Node *, L_Operand *, L_Operand *, int, L_Operand *, L_Operand *, L_Operand *, int */);
extern void L_mem_delete (/* Memory * */);
extern void L_mem_delete_cell (/* Memory_Cell * */);
extern void L_mem_delete_hash (/* void */);
extern void L_mem_delete_value_gt_level (/* Memory *, int */);
extern Memory_Cell *L_mem_find_cell (/* Memory *, L_Operand *, L_Operand * */);
extern Memory_Cell *L_mem_find_hash (/* L_Operand *, L_Operand * */);
extern Memory_Cell *L_mem_get_cell (/* CG_Node *, L_Oper * */);
extern int L_mem_global_load (/* L_Oper * */);
extern int L_mem_global_ref (/* L_Operand *, L_Operand * */);
extern int L_mem_global_store (/* L_Oper * */);
extern void L_mem_load_data (/* L_Data * */);
extern int L_mem_local_load (/* L_Oper * */);
extern int L_mem_local_ref (/* L_Operand *, L_Operand * */);
extern int L_mem_local_store (/* L_Oper * */);
extern Memory_Cell *L_mem_new_cell (/* L_Operand *, L_Operand *, int */);
extern Memory *L_mem_new_memory (/* int */);
extern int L_mem_ptr_load (/* L_Oper * */);
extern int L_mem_ptr_ref (/* L_Operand *, L_Operand * */);
extern int L_mem_ptr_store (/* L_Oper * */);
extern void L_mem_reset (/* CG_Node * */);
extern int L_mem_same_address (/* L_Operand *, L_Operand *, L_Operand *, L_Operand * */);
extern int L_mem_same_global_address (/* L_Operand *, L_Operand *, L_Operand *, L_Operand * */);
extern void L_rf_define_register (/* RegFile *, L_Operand *, int, L_Operand *, L_Operand *, L_Operand *, int */);
extern void L_rf_delete_reg (/* Reg * */);
extern void L_rf_delete_register_gt_level (/* RegFile *, int */);
extern void L_rf_delete_reg_file (/* RegFile * */);
extern Reg *L_rf_delete_reg_gt_level (/* Reg *, int */);
extern RegBank *L_rf_enlargen_bank (/* RegBank *, int */);
extern Reg *L_rf_get_register (/* CG_Node *, RegFile *, L_Operand * */);
extern Reg *L_rf_get_return_reg (/* CG_Node *, RegFile *, L_Oper *, L_Operand *, L_Operand * */);
extern Reg *L_rf_new_reg (/* L_Operand * */);
extern RegFile *L_rf_new_reg_file (/* void */);
extern void L_rf_reset_reg_file (/* RegFile * */);
extern int L_can_swap_int_operands (/* int */);
extern L_Operand *L_get_return_param (/* L_Oper * */);
extern Resolved *L_resolve_unknown (/* CG_Node *, L_Cb *, L_Oper *, int, L_Operand **, L_Oper * */);
extern Resolved *L_rs_add_cell (/* Resolved *, Memory_Cell *, int */);
extern Resolved *L_rs_add_reg (/* Resolved *, Reg *, int */);
extern void L_rs_delete_resolved (/* Resolved * */);
extern void L_rs_evaluate_double_arith (/* CG_Node *, RegFile *, L_Oper *, int */);
extern void L_rs_evaluate_float_arith (/* CG_Node *, RegFile *, L_Oper *, int */);
extern void L_rs_evaluate_int_arith (/* CG_Node *, RegFile *, L_Oper *, int */);
extern void L_rs_evaluate_jsr (/* CG_Node *, RegFile *, L_Oper *, int */);
extern void L_rs_evaluate_load (/* CG_Node *, RegFile *, L_Oper *, int */);
extern void L_rs_evaluate_mov (/* CG_Node *, RegFile *, L_Oper *, int */);
extern void L_rs_evaluate_store (/* CG_Node *, RegFile *, L_Oper *, int */);
extern Resolved *L_rs_new_resolved (/* void */);
extern double L_rs_perform_dbl_arith (/* int, L_Operand *, L_Operand *, L_Operand * */);
extern double L_rs_perform_flt_arith (/* int, L_Operand *, L_Operand *, L_Operand * */);
extern int L_rs_perform_int_arith (/* int, L_Operand *, L_Operand *, L_Operand * */);
extern void L_rs_perform_store (/* CG_Node *, RegFile *, L_Operand *, L_Operand *, L_Operand *, int */);
extern Resolved *L_rs_resolve_unknown (/* Resolved *, CG_Node *, RegFile *, UD_Node *, UD_Node *, int, int, L_Operand **, L_Oper * */);
extern Value *L_rs_solve_2op_int_arith (/* RegFile *, L_Operand *, int, Value *, Value *, int, int */);
extern void L_find_side_effect_free (/* CallGraph *, FILE * */);
extern int L_is_safe_subroutine_call (/* CG_Node *, L_Oper *, int */);
extern int L_is_stack_store (/* L_Oper * */);
extern void L_add_arc (/* UD_Node *, UD_Node * */);
extern int L_add_non_duplicate_arc (/* UD_Node *, UD_Node * */);
extern void L_delete_arc (/* UD_Arc * */);
extern void L_free_all_dst_arcs (/* UD_Arc * */);
extern void L_free_all_src_arcs (/* UD_Arc * */);
extern void L_ud_add_retrace (/* UD_Graph *, UD_Node *, L_Cb *, L_Oper *, Set, Def_List * */);
extern Set L_ud_add_src (/* Set, L_Operand * */);
extern Set L_ud_add_src_reg (/* Set, int */);
extern void L_ud_add_start_node (/* UD_Graph *, UD_Node * */);
extern void L_ud_build_graph_recurse (/* UD_Graph *, UD_Node *, Set, Def_List * */);
extern int L_ud_convert_operand (/* L_Operand * */);
extern Def_List *L_ud_copy_def_list (/* Def_List * */);
extern void L_ud_delete_node (/* UD_Graph *, UD_Node * */);
extern int L_ud_find_matching_address (/* Def_List *, L_Oper * */);
extern int L_ud_find_matching_hash (/* Def_List *, L_Oper * */);
extern UD_Node *L_ud_find_retrace (/* UD_Graph *, L_Cb *, L_Oper *, Set, Def_List * */);
extern L_Oper *L_ud_find_start_pt (/* L_Cb *, L_Cb * */);
extern void L_ud_free_all_def_oper (/* Def_Oper * */);
extern void L_ud_free_all_retrace (/* UD_Graph * */);
extern void L_ud_free_def_list (/* Def_List * */);
extern int L_ud_ignore_oper (/* L_Oper * */);
extern void L_ud_insert_def_oper_first (/* UD_Node *, Def_Oper * */);
extern Def_List *L_ud_new_def_list (/* void */);
extern Def_Oper *L_ud_new_def_oper (/* L_Oper * */);
extern UD_Graph *L_ud_new_graph (/* L_Func *, L_Cb *, L_Oper *, L_Oper * */);
extern UD_Node *L_ud_new_node (/* UD_Graph *, L_Cb *, L_Oper * */);
extern Retrace *L_ud_new_retrace (/* UD_Node *, L_Cb *, L_Oper *, Set, Def_List * */);
extern void L_ud_print_def_oper (/* Def_Oper * */);
extern void L_ud_print_graph_recurse (/* UD_Node * */);
extern void L_ud_print_node (/* UD_Node * */);
extern void L_ud_reduce_graph (/* UD_Graph * */);
extern void L_ud_reduce_graph_recurse (/* UD_Graph *, UD_Node * */);
extern Set L_ud_remove_dest (/* Set, int */);
extern void L_ud_remove_matching_address (/* Def_List *, L_Oper * */);
extern void L_ud_update_def_list (/* Def_List *, L_Oper * */);
extern UD_Graph *L_usedef_build_graph (/* CG_Node *, L_Cb *, L_Oper *, int, L_Operand **, L_Oper * */);
extern void L_usedef_delete_graph (/* UD_Graph * */);
extern void L_usedef_print_graph (/* UD_Graph * */);
extern Value *L_v_add_value (/* Value *, int, L_Operand *, L_Operand *, L_Operand *, int */);
extern Value *L_v_copy_value (/* Value * */);
extern void L_v_delete_all_value (/* Value * */);
extern Value *L_v_delete_value_gt_level (/* Value *, int */);
extern Value *L_v_find_matching_value (/* Value *, int, L_Operand *, L_Operand *, L_Operand *, int */);
extern Value *L_v_get_value_same_level (/* Value *, Value * */);
extern Value *L_v_new_value (/* int, L_Operand *, L_Operand *, L_Operand *, int */);

#endif /* __STDC__ */
#endif /* __CEXTRACT__ */
