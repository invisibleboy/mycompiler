/*****************************************************************************\
 *
 *		      Illinois Open Source License
 *                     University of Illinois/NCSA
 *                         Open Source License
 *
 * Copyright (c) 2004, The University of Illinois at Urbana-Champaign.
 * All rights reserved.
 *
 * Developed by:             
 *
 *		IMPACT Research Group
 *
 *		University of Illinois at Urbana-Champaign
 *
 *              http://www.crhc.uiuc.edu/IMPACT
 *              http://www.gelato.org
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal with the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimers.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimers in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 * Neither the names of the IMPACT Research Group, the University of
 * Illinois, nor the names of its contributors may be used to endorse
 * or promote products derived from this Software without specific
 * prior written permission.  THE SOFTWARE IS PROVIDED "AS IS",
 * WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 *
\*****************************************************************************/
/*
 * Preliminary pristine Hmdes2 structure.
 * 
 * Created by John C. Gyllenhaal 2/10/95
 */

/*
 * Indicate that the pristine Hmdes2 structure file has been included
 */
$def pristine_Hmdes2_structure

/* 
 * Specifies the registers in the architectures.
 * Also specifies how these registers overlap each other.  The overlapping
 * conditions are assumed to be completely specified (up to the compiler
 * to check for errors in this case).
 */
CREATE SECTION Register
  OPTIONAL overlaps (LINK(Register)*);
{
}


/*
 * Specifies the field types supported by the architecture's 
 * instruction set (assembly language).
 *
 * Currently uses LINKs to specify the hierarchy of field types.
 *
 * When the CHILD datum type gets implemented, the LINK will get changed
 * to CHILD.  For example, lit11 is compatible with lit5.
 */
CREATE SECTION Field_Type
  OPTIONAL compatible_with(LINK(Field_Type)*);
{
}

/*
 * Specifies the architecture's assembly language operation formats
 */
CREATE SECTION Operation_Format
  OPTIONAL pred(LINK(Field_Type)*);
  OPTIONAL src(LINK(Field_Type)*);
  OPTIONAL dest(LINK(Field_Type)*);
{
}

/* 
 * Specifies the architecture's resources (real or for only
 * interlock purposes)
 */
CREATE SECTION Resource
{
}

/*
 * Specifies the characteristic's of the architecture's resource usage.
 * Namely, when a resource is used by an operation relative to
 * issue time.
 *
 * Possible extension:  Specify if resource used if operation predicate
 * 			squashed.
 */
CREATE SECTION Resource_Usage
  REQUIRED use(LINK(Resource));
  REQUIRED time(INT INT*);
{
}

/*
 * Specifies resource units (such as function units) that should
 * be treated like a unit by the scheduler/simulator
 */
CREATE SECTION Resource_Unit
  REQUIRED use(LINK(Resource_Usage) LINK(Resource_Usage)*);
{
}

/* 
 * Specifies option for the reservation tables.  For example,
 * that any one of the ialus may be used.
 */
CREATE SECTION Table_Option
  REQUIRED one_of(LINK(Resource_Unit|Resource_Usage) 
		  LINK(Resource_Unit|Resource_Usage)*);
{
}


/* 
 * Specifies the reservation tables used to model the architecture.
 * (How resources are used as an operation executes.) 
 * 
 */
CREATE SECTION Reservation_Table
  REQUIRED use(LINK(Table_Option|Resource_Unit|Resource_Usage)*);
{
}

/*
 * Used to specify how register and sync operands interact so that
 * a dependence distance can be calculated.
 *
 * For now, a list of possible use times are specified for each operand.
 *
 * Other information that it may be desirable to specify is whether
 * the dependence holds for predicated operations on disjoint predicates.
 */
CREATE SECTION Operand_Latency
  REQUIRED time(INT*);
{
}


/*
 * The section is used to specify the dependence distances between
 * operations (if dependence exists).  All dependences (register,
 * memory, control, sync, etc) are modeled as flow,
 * output, and anti dependencies between operands.
 *
 * Uses Operand_Latency above to specify how operands interact.
 *
 * 
 */
CREATE SECTION Operation_Latency
  OPTIONAL dest(LINK(Operand_Latency)*);
  OPTIONAL src(LINK(Operand_Latency)*);
  OPTIONAL pred(LINK(Operand_Latency)*);

  OPTIONAL mem_dest(LINK(Operand_Latency));
  OPTIONAL ctrl_dest(LINK(Operand_Latency));
  OPTIONAL sync_dest(LINK(Operand_Latency));

  OPTIONAL mem_src(LINK(Operand_Latency));
  OPTIONAL ctrl_src(LINK(Operand_Latency));
  OPTIONAL sync_src(LINK(Operand_Latency));
{
}

/*
 * Describes a scheduling alternative for an operation.
 *
 * Allow multiple operation formats to be specified 
 * (for operations that have multiple operation formats but behave the same).
 */
CREATE SECTION Scheduling_Alternative
  REQUIRED format (LINK(Operation_Format) LINK(Operation_Format)*);
  REQUIRED resv (LINK(Reservation_Table));
  REQUIRED latency (LINK(Operation_Latency));
{
}

/*
 * Describes the operations in the architecture.
 *
 * The scheduling alternatives for each operations may be specified.
 */
CREATE SECTION Operation
  REQUIRED alt(LINK(Scheduling_Alternative) LINK(Scheduling_Alternative)*);
{
}
