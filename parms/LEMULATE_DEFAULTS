###############################################################################
##
##		      Illinois Open Source License
##                     University of Illinois/NCSA
##                         Open Source License
##
## Copyright (c) 2004, The University of Illinois at Urbana-Champaign.
## All rights reserved.
##
## Developed by:             
##
##		IMPACT Research Group
##
##		University of Illinois at Urbana-Champaign
##
##              http://www.crhc.uiuc.edu/IMPACT
##              http://www.gelato.org
##
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal with the Software without
## restriction, including without limitation the rights to use, copy,
## modify, merge, publish, distribute, sublicense, and/or sell copies
## of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## Redistributions of source code must retain the above copyright
## notice, this list of conditions and the following disclaimers.
##
## Redistributions in binary form must reproduce the above copyright
## notice, this list of conditions and the following disclaimers in
## the documentation and/or other materials provided with the
## distribution.
##
## Neither the names of the IMPACT Research Group, the University of
## Illinois, nor the names of its contributors may be used to endorse
## or promote products derived from this Software without specific
## prior written permission.  THE SOFTWARE IS PROVIDED "AS IS",
## WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
## LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
## PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
## CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
## OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
## OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
## OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
##
###############################################################################
#
# Lemulate default parameters.
# Lemulate 2.1 uses new parameters -ITI/JCG 3/99
# Lemulate 2.2 supports additional trace parameters -ITI/JCG 4/99

(Lemulate
    ansi_c_mode=yes;      # Set to no if emulating K&R-c

    generate_info_files=no;  # Generate files containing the contents of 
                             # host_info, preprocess_info, and impact_info 
                             # attributes in the source Lcode

    use_register_arrays=no; # Use arrays instead of individual reg variables

    # Lemulate requires the host layout information generated by
    # gen_CtoP for this benchmark.
    layout_database_name=./host_layout_info.md;

    # probe_for specifies how to instrument the program.  Valid settings:
    #   nothing     -> no instrumentation at all 
    #   profiling   -> uses presets for lcode profiling
    #   simulation  -> uses presets for lcode simulation
    #   custom      -> uses "custom" parameters below
    #   memtrace    -> ask Sias
    probe_for=nothing; 

    #
    # Simulation and Custom parameters:
    # (*ONLY* used if probe_for="simulation" or probe_for="custom"!)
    #
    trace_promoted_preds=no;  # Trace promoted predicate (pred[1]) for each op
                              # Note: scheduling and register allocation will
                              #       make pred[1] invalid (will get garbage
	                      #       values).  Use only if you know pred[1]
                              #       has something valid in it or it doesn't
                              #       matter if you get random values.

    #
    # Custom parameters: 
    # (*ONLY* used if probe_for="custom"!)
    #
    predicate_probe_code=no;  # Predicate probes on op's pred[0]
    trace_control_flow=no;    # Trace function calls/returns, cb entries, etc.
    trace_empty_cbs=no;       # Trace empty cb entries, if trace_control_flow=1
    trace_mem_addrs=no;       # Trace load/store memory addresses
    trace_masked_load_faults=no; # Trace masked seg faults for non-trap loads
    trace_jump_rg_src1=no;    # Trace condition of hashing jump
    trace_pred_uses=no;       # Trace predicate's value (pred[0]) at each use
    trace_pred_defs=no;       # Trace predicate's value at its def(s)
    trace_pred_jump_fall_thru=no; # Trace predicated jump's fall thru
    trace_extra_headers=no;   # Add trace headers to make trace parsing easier
    trace_op_ids=no;          # Trace op->id for every operation
    trace_enhanced_op_ids=no; # Trace func id and op->id for every operation
    trace_dest_reg_values=no; # Trace register destination values
    trace_src_reg_values=no;  # Trace register source values
    trace_src_lit_values=no;  # Trace literal (constant) source values

    trace_objects=no;	      # Trace object creation and access.
			      # Use at your own risk.  Requires preprocessing
			      # of Lcode.  Incompatible with other traces.

    # Reuse emulation support
    reuse_emulation=no;
   
    # Generate the appropriate cfiles only (Useful for debugging)
    cfile_only=no;
end)
