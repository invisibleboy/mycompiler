#!/bin/sh
###############################################################################
##
##		      Illinois Open Source License
##                     University of Illinois/NCSA
##                         Open Source License
##
## Copyright (c) 2004, The University of Illinois at Urbana-Champaign.
## All rights reserved.
##
## Developed by:             
##
##		IMPACT Research Group
##
##		University of Illinois at Urbana-Champaign
##
##              http://www.crhc.uiuc.edu/IMPACT
##              http://www.gelato.org
##
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal with the Software without
## restriction, including without limitation the rights to use, copy,
## modify, merge, publish, distribute, sublicense, and/or sell copies
## of the Software, and to permit persons to whom the Software is
## furnished to do so, subject to the following conditions:
##
## Redistributions of source code must retain the above copyright
## notice, this list of conditions and the following disclaimers.
##
## Redistributions in binary form must reproduce the above copyright
## notice, this list of conditions and the following disclaimers in
## the documentation and/or other materials provided with the
## distribution.
##
## Neither the names of the IMPACT Research Group, the University of
## Illinois, nor the names of its contributors may be used to endorse
## or promote products derived from this Software without specific
## prior written permission.  THE SOFTWARE IS PROVIDED "AS IS",
## WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
## LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
## PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
## CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
## OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
## OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
## OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
##
###############################################################################
#
#	tar and zip files 
#
#	Usage: gen_tar "benchname" "ext" ["directory"]
#	
#	Rewritten by Daniel Lavery, Wen-mei Hwu
#
#       Tweaked for clearer/quieter operation -JCG 8/98
#
#       Enhanced to handle when *.ext returns huge file lists and 
#       to use read_platform_info instead of host_arch -JCG 2/99
#
#       Always add host_layout_info.md (if present) to tar file -JCG 6/99
#
#       Changed output name from bench_ext.tar.gz to bench.ext.tgz -JCG 6/99

# Save host_layout_info.md file in every tar, since always needed -JCG 6/99
INFO_FILE="host_layout_info.md";

if [ $# -gt 2 ]; then
        DIR="$3";
        echo "> gen_tar changing directories to '${DIR}'";
        cd ${DIR};
fi;

if [ $# -gt 1 ]; then
        BENCHMARK="$1";
        EXT="$2";
        if [ -f $INFO_FILE ]; then
  	  echo "> Saving .${EXT} files and $INFO_FILE in ${BENCHMARK}.${EXT}.tgz"
        else
	  echo "> Saving .${EXT} files in ${BENCHMARK}.${EXT}.tgz"
        fi

else
	echo "Usage: gen_tar benchname ext [directory]";
        echo "  Tar and zip files *.ext in 'directory' (. if none specified)";
        echo "  Output file of the form benchname.ext.tgz";
        echo "  Now also adds 'host_layout_info.md' to .tgz file, if present";
	exit 0200;
fi;


# Use read_platform_info instead of host_arch
HOST_PLATFORM=`read_platform_info -host_platform`
if test "$?" != 0; then 
  echo "Unable to determine platform using read_platform_info."
  echo "Error message returned:"
  echo "$HOST_PLATFORM"
  exit 1;
fi

case $HOST_PLATFORM in
    hp*|x86lin)
        # HP/Linux version of tar always returns proper exit status
        CREATE_FLAGS="cf";
        APPEND_FLAGS="rf";;
    *)
        # Default case, hope it works
        CREATE_FLAGS="cf";
        APPEND_FLAGS="rf";;
esac
# Added support for huge number of files (e.g., *.pcs for 126.gcc)
# Now uses shell support to handle *.${EXT} instead of doing a tar *.${EXT}
# Group files into 100 file packets, and pass to tar that way. -JCG 2/99
#
# Create the tar file with the first tar command
TAR_FLAGS="$CREATE_FLAGS";

# Remove any existing tar file for safety
rm -f ${BENCHMARK}.${EXT}.tar 

# Keep track of files in this packet
FILE_LIST="";
COUNT=0;

# Add host_layout_info.md unless doesn't exist 
if [ -f $INFO_FILE ]; then
   FILE_LIST="$INFO_FILE";
   COUNT=1;
fi

for FILE_NAME in *.${EXT}
do
   # Add file to list and update count
   FILE_LIST="$FILE_LIST $FILE_NAME";
   COUNT=`expr $COUNT + 1`

   # Do tar once threshold reached
   if [ $COUNT -ge 100 ]; then
      nice tar $TAR_FLAGS ${BENCHMARK}.${EXT}.tar $FILE_LIST;
      ERROR=$?;
      if [ $ERROR -ne 0 ]; then
         echo "> tar failed on input files: *.${EXT}";
         echo "> error_code= ${ERROR}";
         exit 0200;
      fi;
    
      # All later tars will append
      TAR_FLAGS="$APPEND_FLAGS";

      # Reset lists
      FILE_LIST="";
      COUNT=0;
   fi
done

# Catch the last set (which might be the first set)
if [ "$FILE_LIST" != "" ]; then
   nice tar $TAR_FLAGS ${BENCHMARK}.${EXT}.tar $FILE_LIST;
   ERROR=$?;
   if [ $ERROR -ne 0 ]; then
      echo "> tar failed on input files: *.${EXT}";
      echo "> error_code= ${ERROR}";
      exit 0200;
   fi;
fi

# In order to get .tgz extension (instead of tar.gz), use redirection method
rm -f ${BENCHMARK}.${EXT}.tgz
nice gzip -c ${BENCHMARK}.${EXT}.tar > ${BENCHMARK}.${EXT}.tgz
ERROR=$?;
if [ $ERROR -ne 0 ]; then
    echo "> gzip failed on input file: ${BENCHMARK}.${EXT}.tar";
    echo "> error_code= ${ERROR}";
    exit 0200;
fi;

# Remove tar file 
rm -f ${BENCHMARK}.${EXT}.tar

echo "> Done";

